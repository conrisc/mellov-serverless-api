openapi: 3.0.1

info:
    description: "Mellov API"
    version: 1.0.0
    title: "Mellov API"
    license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
    - name: "admins"
      description: "Secured Admin-only calls"
    - name: "developers"
      description: "Operations available to regular developers"
    - name: "users"
      description: "Operations available to signed in users"

paths:
    /notes:
        options:
            summary: CORS support
            description: |
                Enable CORS by returning correct headers
            tags:
                - CORS
            responses:
                200:
                    description: Default response for CORS method
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content: {}
            x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                    application/json: |
                        {
                            "statusCode" : 200
                        }
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
        get:
            tags:
                - "users"
            summary: "Search notes"
            description: "Find notes"
            operationId: "searchNotes"
            parameters:
                - $ref: '#/components/parameters/skip'
                - $ref: '#/components/parameters/limit'
            responses:
                200:
                    description: "search result matching criteria"
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/NoteItem"
                400:
                    description: "invalid input, object invalid"
            security:
                - MellovAuthorizer:
                    - "aws.cognito.signin.user.admin"
            x-swagger-router-controller: "Users"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:118101356080:function:GetNotesFunction/invocations"
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        post:
            tags:
                - "users"
            summary: "Add note"
            description: "Add note"
            operationId: "addNote"
            requestBody:
                description: "Note to add"
                required: true
                content:
                    'application/json':
                        schema:
                            $ref: "#/components/schemas/NoteItem"
            responses:
                201:
                    description: "item added"
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ItemId"
                400:
                    description: "invalid input, object invalid"
                409:
                    description: "an existing item already exists"
            security:
                - MellovAuthorizer:
                    - "aws.cognito.signin.user.admin"
            x-swagger-router-controller: "Users"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:118101356080:function:AddNoteFunction/invocations"
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
    /notes/{noteId}:
        options:
            summary: CORS support
            description: |
                Enable CORS by returning correct headers
            tags:
                - CORS
            parameters:
                -
                    name: "noteId"
                    in: "path"
                    description: "The note Id"
                    required: true
                    schema:
                        type: "string"
            responses:
                200:
                    description: Default response for CORS method
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content: {}
            x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                    application/json: |
                        {
                            "statusCode" : 200
                        }
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
        get:
            tags:
                - "users"
            summary: "Search note"
            description: "Find note"
            operationId: "searchNote"
            parameters:
                -
                    name: "noteId"
                    in: "path"
                    description: "The note Id"
                    required: true
                    schema:
                        type: "string"
            responses:
                200:
                    description: "search result matching criteria"
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/NoteItem"
                400:
                    description: "invalid input, object invalid"
            security:
                - MellovAuthorizer:
                    - "aws.cognito.signin.user.admin"
            x-swagger-router-controller: "Users"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:118101356080:function:GetNoteFunction/invocations"
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
    /songs:
        options:
            summary: CORS support
            description: |
                Enable CORS by returning correct headers
            tags:
                - CORS
            responses:
                200:
                    description: Default response for CORS method
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content: {}
            x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                    application/json: |
                        {
                            "statusCode" : 200
                        }
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
        get:
            tags:
                - "users"
            summary: "Search songs"
            description: "Find songs"
            operationId: "searchSongs"
            parameters:
                - $ref: '#/components/parameters/skip'
                - $ref: '#/components/parameters/limit'
                -
                    name: "title"
                    in: "query"
                    description: "a phrase song's title must contain"
                    required: false
                    schema:
                        type: "string"
                -
                    name: "tags"
                    in: "query"
                    description: "tags which song must contain"
                    required: false
                    schema:
                        type: "array"
                        items:
                            type: "string"
                -
                    name: "sort"
                    in: "query"
                    description: "type of sort to use"
                    required: false
                    schema:
                        type: "string"
            responses:
                200:
                    description: "search result matching criteria"
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/SongItem"
                400:
                    description: "invalid input, object invalid"
            security:
                - MellovAuthorizer:
                    - "aws.cognito.signin.user.admin"
            x-swagger-router-controller: "Users"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:118101356080:function:GetSongsFunction/invocations"
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
    /tags:
        options:
            summary: CORS support
            description: |
                Enable CORS by returning correct headers
            tags:
                - CORS
            responses:
                200:
                    description: Default response for CORS method
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content: {}
            x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                    application/json: |
                        {
                            "statusCode" : 200
                        }
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
        get:
            tags:
                - "users"
            summary: "Search tags"
            description: "Find tags"
            operationId: "searchTags"
            parameters:
                - $ref: '#/components/parameters/skip'
                - $ref: '#/components/parameters/limit'
            responses:
                200:
                    description: "search result matching criteria"
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/TagItem"
                400:
                    description: "invalid input, object invalid"
            security:
                - MellovAuthorizer:
                    - "aws.cognito.signin.user.admin"
            x-swagger-router-controller: "Users"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:118101356080:function:GetTagsFunction/invocations"
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
    /yt-items:
        options:
            summary: CORS support
            description: |
                Enable CORS by returning correct headers
            tags:
                - CORS
            responses:
                200:
                    description: Default response for CORS method
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content: {}
            x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                    application/json: |
                        {
                            "statusCode" : 200
                        }
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
        get:
            tags:
                - "users"
            summary: "Search yt items"
            description: "Find yt items"
            operationId: "searchYtItems"
            parameters:
                - $ref: '#/components/parameters/limit'
                -
                    name: "title"
                    in: "query"
                    description: "title to search"
                    required: true
                    schema:
                        type: "string"
            responses:
                200:
                    description: "search result matching criteria"
                    headers:
                        Access-Control-Allow-Origin:
                            schema:
                                type: string
                        Access-Control-Allow-Methods:
                            schema:
                                type: string
                        Access-Control-Allow-Headers:
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                type: "array"
                                items:
                                    $ref: "#/components/schemas/YtVideoItem"
                400:
                    description: "invalid input, object invalid"
            security:
                - MellovAuthorizer:
                    - "aws.cognito.signin.user.admin"
            x-swagger-router-controller: "Users"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:eu-central-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-central-1:118101356080:function:GetYtItemsFunction/invocations"
                responses:
                    default:
                        statusCode: "200"
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
                            method.response.header.Access-Control-Allow-Methods: '''*'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: |
                                {}
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

components:
    securitySchemes:
        MellovAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
                providerARNs:
                    - "arn:aws:cognito-idp:eu-central-1:118101356080:userpool/eu-central-1_6DPW3zDLR"
                type: "cognito_user_pools"
    parameters:
        limit:
            name: limit
            in: query
            description: "maximum number of records to return"
            required: false
            schema:
                type: "integer"
                maximum: 300
                minimum: 0
                format: "int32"
        skip:
            name: "skip"
            in: "query"
            description: "number of records to skip for pagination"
            required: false
            schema:
                type: "integer"
                minimum: 0
                format: "int32"
    schemas:
        ItemId:
            type: string
            example: "5ddd3f95ee07e600231e9a4c"
        NoteItem:
            type: "object"
            required:
                - "creationDate"
                - "text"
            properties:
                id:
                    type: "string"
                    example: "4daef72846cae99923dfd6ez"
                creationDate:
                    type: "string"
                    example: "2014-01-02T12:48:00Z"
                text:
                    type: "string"
                    example: "Example text"
            example:
                id: "4daef72846cae99923dfd6ez"
                text: "Example Text"
                creationDate: "2014-01-02T12:48:00Z"
        SongItem:
            type: "object"
            required:
                - "dateAdded"
                - "tags"
                - "title"
                - "url"
            properties:
                id:
                    type: "string"
                    example: "5daef72831cae99923dad6ez"
                title:
                    type: "string"
                    example: "G-Eazy - Far alone"
                url:
                    type: "string"
                    example: "https://youtube.com/watch?v=sxV1_Lr1yf0"
                dateAdded:
                    type: "string"
                    example: "2013-12-06T00:25:26Z"
                tags:
                    type: "array"
                    example:
                        - "dance"
                        - "party"
                    items:
                        type: "string"
            example:
                id: "5daef72831cae99923dad6ez"
                title: "G-Eazy - Far alone"
                url: "https://youtube.com/watch?v=sxV1_Lr1yf0"
                dateAdded: "2013-12-06T00:25:26Z"
                tags:
                    - "dance"
                    - "party"
        TagItem:
            type: "object"
            required:
                - "name"
            properties:
                id:
                    type: "string"
                    example: "5daef72831cae99923dad6ez"
                name:
                    type: "string"
                    example: "Dance"
            example:
                id: "5daef72831cae99923dad6ez"
                name: "Dance"
        YtVideoItem:
            type: "object"
            properties:
                title:
                    type: "string"
                    example: "LP - Muddy Waters"
                videoId:
                    type: "string"
                    example: "Ss8t7a8n0U4"
                thumbnailUrl:
                    type: "string"
                    example: "https://i.ytimg.com/vi/Ss8t7a8n0U4/default.jpg"
            example:
                videoId: "Ss8t7a8n0U4"
                title: "LP - Muddy Waters"
                thumbnailUrl: "https://i.ytimg.com/vi/Ss8t7a8n0U4/default.jpg"
